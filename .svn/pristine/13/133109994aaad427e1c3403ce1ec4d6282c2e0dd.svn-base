using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using EnterpriseDataPipeline.Models;
using DynamicMVC.UI.Controllers;
using System.Threading.Tasks;

using System.Collections;
using System.Text;
using System.Web.Routing;
using DynamicMVC.Business.Attributes;
using DynamicMVC.Business.Models;
using DynamicMVC.Data;
using DynamicMVC.UI.Extensions;
using DynamicMVC.UI.ViewModels;

using DynamicMVC.UI;

using System.Data.Common;

using SSHWrapper;

using MySql.Data;
using MySql.Data.MySqlClient;

namespace EnterpriseDataPipeline.Controllers
{
    //[Authorize(Roles = "Admin")]
    //[Authorize(Roles = "Operator, Admin")]
    public class JobController : Controller
    //public class JobController : DynamicController
    {
        //MusicStoreEntities storeDB = new MusicStoreEntities();

        public ActionResult Index()
        {
            //return View();

            //var db = new StorageDBContext("DefaultConnection");
            //return View(db.Storages.ToList());
            //try
            //{
                //ApplicationDbContext db = new ApplicationDbContext();
                //return View(db.Storage.OrderBy(s => s.Name).ToList());
            //}
            //catch(Exception ex)
            //{
            //    string str = ex.Message;
            //}

            //return View();

            //using (var ctx = new StorageDBContext())
            //using (var cmd = ctx.Database.Connection.CreateCommand())
            //{
            //    ctx.Database.Connection.ConnectionString = "server=rxfjzxng1d.database.windows.net,1433;Database=SV4UDataPipeDB;User ID=SV4UAdmin;Password=Swatcloud:2046;min pool size=10;max pool size=50;Connect Timeout=60;";
            //    ctx.Database.Connection.Open();
            //    cmd.CommandText = "SELECT * FROM Storages";
            //    using (var reader = cmd.ExecuteReader())
            //    {
            //        var model = Read(reader).ToList();
            //        return View(model);
            //    }
            //}

                //using (var ctx = new ApplicationDbContext())
                //{
                //    using (var cmd = ctx.Database.Connection.CreateCommand())
                //    {
                //        //ctx.Database.Connection.ConnectionString = "server=rxfjzxng1d.database.windows.net,1433;Database=SV4UDataPipeDB;User ID=SV4UAdmin;Password=Swatcloud:2046;min pool size=10;max pool size=50;Connect Timeout=60;";

                //        ctx.Database.Connection.

                //        ctx.Database.Connection.ConnectionString = "server=142.0.252.94;user id=root;persistsecurityinfo=True;database=BooksDB;port=3306;";

                //        ctx.Database.Connection.Open();
                //        //cmd.CommandText = "SELECT * FROM Storages";
                //        cmd.CommandText = "SELECT * FROM sys.tables";

                //        using (var reader = cmd.ExecuteReader())
                //        {
                //            var model = Read(reader).ToList();
                //            return View(model);
                //        }
                //    }
                //}

                //MySql.Data.MySqlClient.MySqlConnection conn;
                //string myConnectionString;

                ////myConnectionString = "server=127.0.0.1;uid=root;" + "pwd=12345;database=test;";
                //myConnectionString = "server=142.0.252.94;user id=root;persistsecurityinfo=True;database=BooksDB;port=3306;"; 

                //try
                //{
                //    conn = new MySql.Data.MySqlClient.MySqlConnection();
                //    conn.ConnectionString = myConnectionString;
                //    conn.Open();

                //    var cmd = conn.CreateCommand();

                //    //cmd.CommandText = "SELECT * FROM sys.tables";

                //    //cmd.CommandText = "SELECT * FROM Books";  //return OK

                //    cmd.CommandText = "show tables";

                //    using (var reader = cmd.ExecuteReader())
                //    {
                //        var model = Read(reader).ToList();
                //        //return View(model);
                //    }
                //}
                //catch (MySql.Data.MySqlClient.MySqlException ex)
                //{
                //   string str = ex.Message;
                //}


            ApplicationDbContext db = new ApplicationDbContext();
            return View(db.Storage.OrderBy(s => s.Name).ToList());
        }

        public ActionResult GetDBTable(string dbTable)
        {
            ////perform your action here
            //var states = _stateProvinceService.GetStateProvincesByCountryId(country.Id).ToList();
            //var result = (from s in states
            //              select new { id = s.Id, name = s.GetLocalized(x => x.Name) }
            //             ).ToList();
            //var result = null;

            MySql.Data.MySqlClient.MySqlConnection conn;
            string myConnectionString;

            myConnectionString = "server=142.0.252.94;user id=root;persistsecurityinfo=True;database=BooksDB;port=3306;";

            try
            {
                conn = new MySql.Data.MySqlClient.MySqlConnection();
                conn.ConnectionString = myConnectionString;
                conn.Open();

                var cmd = conn.CreateCommand();

                //cmd.CommandText = "SELECT * FROM sys.tables";

                //cmd.CommandText = "SELECT * FROM Books";  //return OK

                cmd.CommandText = "show tables";

                using (var reader = cmd.ExecuteReader())
                {
                    var model = Read(reader).ToList();
                    //return View(model);

                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            catch (MySql.Data.MySqlClient.MySqlException ex)
            {
                string str = ex.Message;
            }

            return View();

            //return Json(result, JsonRequestBehavior.AllowGet);
        } 

        private static IEnumerable<object[]> Read(DbDataReader reader)
        {
            while (reader.Read())
            {
                var values = new List<object>();
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    values.Add(reader.GetValue(i));
                }
                yield return values.ToArray();
            }
        }

        public ActionResult RunJob()
        {
            ViewBag.Message = "Your Job page.";

            //Storage s = new Storage();
            //var ss = s.Name;
            //StorageDBContext db = new StorageDBContext(); 

            //var storage = storeDB.Storage.ToList();
            //var v = Storage.Name.

            //IList<Storage> list = new List<Storage>();
            //for (int i = 0; i < 10; i++)
            //{
            //    list.Add(new Storage { Id = i, Name = "Org " + i });
            //}

            //return View(list);

            //return View(db.Storages.ToList());
            return View();
        }

        //
        // POST: /Job/RunJob
        [HttpPost]
        [AllowAnonymous]
        //public async Task<ActionResult> RunJob(SV4U.EDPL.DynamicMVC.Models.Storage model, string returnUrl)
        public async Task<ActionResult> Index(EnterpriseDataPipeline.Models.Storage model, string returnUrl)
        {
            //try
            //{
                //if (!ModelState.IsValid)
                //{
                //    return View(model);
                //}

                //string strClusterSourceIP = "142.0.252.92";
                //string strClusterUserName = "root";
                //string strClusterPassword = "";

                //string strSourceIP = "142.0.252.92";
                //string strSourceUserName = "root";
                //string strSourcePassword = "";

                //string strDestinationIP = "142.0.252.92";
                //string strDestinationUserName = "root";
                //string strDestinationPassword = "swatcloud";

                string strClusterSourceIP = "";
                string strClusterUserName = "";
                string strClusterPassword = "";
                string strClusterJobDirectory = "";

                string strSourceIP = "";
                string strSourceUserName = "";
                string strSourcePassword = "";
                string strSourceDatabase = "";
                string strSourceTable = "";

                string strDestinationIP = "";
                string strDestinationUserName = "";
                string strDestinationPassword = "";
                string strDestinationDatabase = "";
                string strDestinationTable = "";

                string strJobName = "";

                string source = Request.Form["Source"];//get the source selected
                string destination = Request.Form["Destination"];//get the destination selected
                string dbTable = Request.Form["DBTable"];//get the destination selected

                ApplicationDbContext db = new ApplicationDbContext();
                //Find the job name
                var ss = db.JobTB.Where(i => i.Source == source && i.Destinatiion == destination);
                if (ss.ToList().Count > 0)
                {
                    strJobName = ss.ToList()[0].JobName;
                }
                else //No job to run
                {
                    ;   //do nothing
                }

                //Job Serve Parameters
                var sClusterParameters = db.JobServer;
                strClusterSourceIP = sClusterParameters.ToList()[0].IPAddress;
                strClusterUserName = sClusterParameters.ToList()[0].UserName;
                strClusterPassword = sClusterParameters.ToList()[0].Password;
                strClusterJobDirectory = sClusterParameters.ToList()[0].JobDirectory;

                if (strJobName.ToUpper().EndsWith("HDFS.JAR") || strJobName.ToUpper().EndsWith("HIVE.JAR"))
                {
                    //Source Parameters
                    var sParameters = db.Storage
                        .Where(i => i.Name == destination);
                    strSourceIP = sParameters.ToList()[0].IPAddress;
                    strSourceUserName = sParameters.ToList()[0].UserName;
                    strSourcePassword = sParameters.ToList()[0].Password;
                    strSourceDatabase = sParameters.ToList()[0].DBName;
                    strSourceTable = sParameters.ToList()[0].TableName;

                    //Destination Parameters
                    var dParameters = db.Storage
                        .Where(i => i.Name == source);
                    strDestinationIP = dParameters.ToList()[0].IPAddress;
                    strDestinationUserName = dParameters.ToList()[0].UserName;
                    strDestinationPassword = dParameters.ToList()[0].Password;
                    strDestinationDatabase = dParameters.ToList()[0].DBName;
                    strDestinationTable = dParameters.ToList()[0].TableName;
                    if (dbTable != null)
                    {
                        strDestinationTable = dbTable;
                    }
                }
                else if (strJobName.ToUpper().EndsWith("SQL.JAR"))
                {
                    //Source Parameters
                    var sParameters = db.Storage
                        .Where(i => i.Name == source);
                    strSourceIP = sParameters.ToList()[0].IPAddress;
                    strSourceUserName = sParameters.ToList()[0].UserName;
                    strSourcePassword = sParameters.ToList()[0].Password;
                    strSourceDatabase = sParameters.ToList()[0].DBName;
                    strSourceTable = sParameters.ToList()[0].TableName;

                    //Destination Parameters
                    var dParameters = db.Storage
                        .Where(i => i.Name == destination);
                    strDestinationIP = dParameters.ToList()[0].IPAddress;
                    strDestinationUserName = dParameters.ToList()[0].UserName;
                    strDestinationPassword = dParameters.ToList()[0].Password;
                    strDestinationDatabase = dParameters.ToList()[0].DBName;
                    strDestinationTable = dParameters.ToList()[0].TableName;
                    //if (dbTable != null)
                    //{
                    //    strDestinationTable = dbTable;
                    //}
                }


                //Initialize sshCmdClient
                SSHCommandClient sshCmdClient = new SSHCommandClient(strSourceIP, strSourceUserName, strSourcePassword,
                                                                     strSourceDatabase, strSourceTable,
                                                                     strDestinationIP, strDestinationUserName, strDestinationPassword,
                                                                     strDestinationDatabase, strDestinationTable, strJobName);

                sshCmdClient.ClusterHost = strClusterSourceIP;
                sshCmdClient.ClusterUserName = strClusterUserName;
                sshCmdClient.ClusterPassword = strClusterPassword;
                sshCmdClient.ClusterJobDirectory = strClusterJobDirectory;

                //string x = await sshCmdClient.RunCmdInRemoteServerAsync();

                string x = await Task.Run(() => sshCmdClient.RunCmdInRemoteServerAsync());

                //string x = await sshCmdClient.RunCmdInRemoteServerAsyncMKDir();

                db = new ApplicationDbContext();
                return View(db.Storage.OrderBy(s => s.Name).ToList());
            //}
            //catch(Exception ex)
            //{
            //    string str = ex.Message;
            //}

            //return View();
        }
    }
}